/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/{id}": {
    /**
     * Get stream by ID
     * @description Get a specific stream
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the stream to be deleted */
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Stream"];
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
    /**
     * Update a stream
     * @description Updates a specific stream
     */
    put: {
      parameters: {
        path: {
          /** @description The ID of the stream to be updated */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StreamUpdate"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Stream"];
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
    /**
     * Delete a stream
     * @description Deletes a specific stream
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the stream to be deleted */
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Stream"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
  };
  "/": {
    /**
     * Get all streams
     * @description Gets all streams
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Stream"][];
          };
        };
      };
    };
    /**
     * Create a new stream
     * @description Creates a new stream
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewStream"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Stream"];
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    StreamUpdate: {
      /** @description The updated name of the stream */
      name?: string;
      sources?: components["schemas"]["Source"][];
    };
    NewStream: {
      /** @description The name of the new stream */
      name?: string;
      sources?: components["schemas"]["Source"][];
    };
    Stream: {
      _id: string;
      name: string;
      timestamp: number;
      author: string;
      sources: components["schemas"]["Source"][];
    };
    Source: {
      _id: string;
      /** @enum {string} */
      type: "instagram" | "facebook" | "x" | "youtube";
      meta: Record<string, never>;
      options?: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
