/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/signature": {
    /**
     * Sign Ethereum Message
     * @description Signs an Ethereum message using a private key
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessageRequest"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["SignedMessage"];
          };
        };
      };
    };
  };
  "/token": {
    /**
     * Get All Tokens
     * @description Retrieves all tokens
     */
    get: {
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["TokensList"];
          };
        };
      };
    };
    /**
     * Create Token
     * @description Creates a new token
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TokenRequest"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["TokenResponse"];
          };
        };
        /** @description Token already exists */
        409: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/transaction/{symbol}": {
    /**
     * Get Transaction History by Symbol
     * @description Retrieves transaction history for a specific symbol
     */
    get: {
      parameters: {
        path: {
          /** @description Symbol identifier */
          symbol: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["Transaction"][];
          };
        };
      };
    };
    /**
     * Verify Signature and Perform Transaction
     * @description Verifies a signature and performs a transaction for a specific symbol
     */
    post: {
      parameters: {
        path: {
          /** @description Symbol identifier */
          symbol: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TransactionRequest"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["TransactionResponse"];
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/wallet": {
    /**
     * Create Random Wallet
     * @description Creates a random Ethereum wallet
     */
    get: {
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["Wallet"];
          };
        };
      };
    };
  };
  "/wallet/{key}": {
    /**
     * Get Wallet Balance
     * @description Retrieves wallet balance by key
     */
    get: {
      parameters: {
        path: {
          /** @description Wallet key */
          key: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["WalletBalance"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    MessageRequest: {
      privateKey: string;
      from: string;
      to: string;
      value: number;
      symbol: string;
    };
    /** @example 0x1234567890abcdef */
    SignedMessage: string;
    TokenRequest: {
      name: string;
      symbol: string;
      wallet: string;
      emission: number;
    };
    TokenResponse: {
      id?: string;
      name?: string;
      /** Format: date-time */
      timestamp?: string;
      author?: string;
      symbol?: string;
    };
    TokensList: {
        id?: string;
        name?: string;
        /** Format: date-time */
        timestamp?: string;
        author?: string;
        symbol?: string;
      }[];
    TransactionRequest: {
      from: string;
      to: string;
      value: number;
      signature: string;
      message?: string;
    };
    TransactionResponse: {
      id?: string;
      from?: string;
      to?: string;
      symbol?: string;
      /** Format: date-time */
      timestamp?: string;
      message?: string;
      value?: number;
    };
    Transaction: {
      id?: string;
      from?: string;
      to?: string;
      symbol?: string;
      /** Format: date-time */
      timestamp?: string;
      message?: string;
      value?: number;
    };
    Wallet: {
      /** @description Ethereum address of the created wallet */
      address?: string;
      /** @description Chain code of the created wallet */
      chainCode?: string;
      /** @description Depth of the created wallet */
      depth?: number;
      /** @description Fingerprint of the created wallet */
      fingerprint?: string;
      /** @description Index of the created wallet */
      index?: number;
      mnemonic?: {
        /** @description Entropy of the mnemonic phrase */
        entropy?: string;
        /** @description Password used with the mnemonic phrase */
        password?: string;
        /** @description Mnemonic phrase of the created wallet */
        phrase?: string;
        wordlist?: {
          /** @description Locale of the wordlist */
          locale?: string;
        };
      };
      /** @description Parent fingerprint of the created wallet */
      parentFingerprint?: string;
      /** @description Derivation path of the created wallet */
      path?: string;
      /** @description Provider of the created wallet */
      provider?: string;
      /** @description Public key of the created wallet */
      publicKey?: string;
      /** @description Public key of the created wallet */
      privateKey?: string;
    };
    /** @description Balance by symbol */
    WalletBalance: {
      [key: string]: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
